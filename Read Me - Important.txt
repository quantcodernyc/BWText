Due to internal security I was asked to create zip file with texts. 

I have created two separate zip files, one with csharp main program files and other with plain text. Hopefully, this will get delivered without any issues.

Solution Summary:
-----------------

Problem # 1
===========

Welcome to the blob wiki!

Assumptions:
1. There is single blob shape in 10×10 array. 
2. Data Quality: Presumed input 2D array has valid blob and correct binary values.

Credits & Comments
1. Google – blob related information and techniques
2. GitHub seach and found promising java solution by author “dnance” & other solutions available
3. What did I do? 
A. First I converted code to C# (~ 20 minutes)
B. Spent next 2 hours trying various solutions 
4. Time Spent – Approx 3 hours dedicated plus some not dedicated time thinking about problem
5. How to improve this solution: I would like to submit 2 solutions and ideas where I would like to invest my time to improve this solution.

Solution 1: Blob.cs —> This solution works in majority of tests I performed to find blob boundary, however it has higher cell reads compared to NewBlob.cs

There are instances where this algorithm read single cell twice which can be optimized. I tried same in NewBlob.cs
Solution 2: NewBlob.cs —> This solution is very efficient in terms on cell reads, however in fails to identify boundary correctly where blob has singular linear strings flowing out at edges. 
This solution should work very efficiently for 99% natural blobs.

Summary: I would invest more time on Solution 2 with code which limit left and right boundaries limitations and fall back to regular limit finding when left > 5 or right < 5

Testing: In order for best usage of time, I relied on breaking solution approach by supplying extreme cases where solution would fail. Below is one example of blob I chose to fail my Solution Blob2.cs

I also checked Mathnet Numerics library to see if there is ready library available to fill 2D array with binary values which qualify as blob.

I would like to replace integer 2D array with BitArray which should help in terms of scalability and performance exponentially by taking very less memory and faster computing.

For Solution 1: Cell reads are minimized by order of selecting if we find right boundary first. Predictive model would help to improve this solution.

Sample Blob to break Solution – NewBlob

{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 1, 1, 1, 0, 0, 0, 1, 0},
{0, 0, 1, 1, 1, 1, 1, 0, 1, 0},
{0, 1, 1, 0, 0, 0, 1, 0, 1, 0},
{0, 1, 1, 1, 1, 1, 1, 0, 1, 0},
{0, 1, 0, 0, 1, 0, 1, 0, 1, 0},
{0, 1, 0, 0, 1, 0, 1, 1, 1, 0},
{0, 1, 0, 0, 1, 1, 1, 0, 1, 0},
{0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}


Problem # 2
===========
Concordance
This solution was inspired from this repository: https://github.com/andrerpena/WordCounter

Problems with above repository solution: It was unable to handle abbreviations ("i.e.", "e.g.") cases and completely gave wrong index and occurrences results for every word in text.

I have fixed abbreviations issue and now code is able to produce results correctly.

Time Spent: Approx 30 minutes to search on github for solutions, 30 minutes to check and understand current solution, 30 minutes to fix and test my fix and improved version.

Pending Issue: After I fixed abbreviations issue, all words are printed correctly except abbreviations are printed as one character. For example, "e.g." print as "e" & "i.e." print as "i". In order to fix this issue need certain program design changes and I anticipate 2 to 3 hours to fix it.

Total Time spent: 2 hours